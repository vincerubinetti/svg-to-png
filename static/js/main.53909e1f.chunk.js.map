{"version":3,"sources":["br.js","svg.svg","header.js","cell.js","upload.js","paste.js","info.js","width.js","height.js","aspect.js","reset.js","fit.js","margin.js","transparent.js","background.js","canvas.js","constants.js","download.js","section.js","hr.js","util.js","main.js","index.js"],"names":["Br","className","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","fill","transform","d","_ref","svgRef","title","props","viewBox","ref","ForwardRef","forwardRef","Header","id","href","Cell","style","tooltip","text","icon","controlId","control","color","disabled","data-tooltip","undefined","Upload","setSource","setFilename","inputRef","useRef","useState","uploadDrag","setUploadDrag","onUpload","a","file","files","name","replace","current","value","onChange","event","type","accept","display","data-drag","onClick","click","onDragEnter","onDragLeave","onDragOver","preventDefault","onDrop","stopPropagation","dataTransfer","Paste","Info","error","filename","specifiedWidth","specifiedHeight","absoluteWidth","absoluteHeight","Width","width","setWidth","setHeight","aspectRatio","min","max","step","data-width","Height","height","data-height","Aspect","setAspectRatio","toFixed","Reset","originalWidth","originalHeight","Fit","fit","setFit","Margin","margin","setMargin","Transparent","transparent","setTransparent","checked","Background","background","setBackground","Canvas","image","drawWidth","Math","abs","drawHeight","canvas","ctx","getContext","clearRect","fillStyle","fillRect","x","y","drawImage","densityScale","Download","uri","document","querySelector","toDataURL","link","download","Section","Hr","unitsToPixels","string","units","ch","ex","em","rem","in","cm","mm","pt","pc","ppi","px","parseFloat","trim","urlToImage","url","Promise","resolve","reject","Image","addEventListener","src","sourceToImage","blob","Blob","URL","createObjectURL","revokeObjectURL","sourceToSvg","doc","DOMParser","parseFromString","svg","Error","textContent","Main","show","setShow","setSvg","setImage","setError","getAttribute","viewBoxWidth","split","viewBoxHeight","useEffect","message","update","window","devicePixelRatio","App","render","getElementById"],"mappings":"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","file":"static/js/main.53909e1f.chunk.js","sourcesContent":["import React from 'react';\n\nimport './br.css';\n\n// line break component\nexport const Br = () => <div className='br' />;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"white\",\n  transform: \"rotate(0)\",\n  d: \"M-84.1487,-15.8513 a22.4171,22.4171 0 1 0 0,31.7026 h168.2974 a22.4171,22.4171 0 1 0 0,-31.7026 Z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"white\",\n  transform: \"rotate(45)\",\n  d: \"M-84.1487,-15.8513 a22.4171,22.4171 0 1 0 0,31.7026 h168.2974 a22.4171,22.4171 0 1 0 0,-31.7026 Z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"white\",\n  transform: \"rotate(90)\",\n  d: \"M-84.1487,-15.8513 a22.4171,22.4171 0 1 0 0,31.7026 h168.2974 a22.4171,22.4171 0 1 0 0,-31.7026 Z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"white\",\n  transform: \"rotate(135)\",\n  d: \"M-84.1487,-15.8513 a22.4171,22.4171 0 1 0 0,31.7026 h168.2974 a22.4171,22.4171 0 1 0 0,-31.7026 Z\"\n}));\n\nvar SvgSvg = function SvgSvg(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"-125 -125 250 250\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgSvg, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/svg.f04f4098.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\n\nimport { Br } from './br';\n\nimport { ReactComponent as Svg } from './svg.svg';\n\nimport './header.css';\n\n// header section\nexport const Header = () => (\n  <header>\n    <section>\n      <div id='icons'>\n        <Svg />\n        <i className='fas fa-long-arrow-alt-right fa-xs'></i>\n        <i className='fas fa-image'></i>\n      </div>\n      <Br />\n      <div id='title'>SVG to PNG</div>\n      <a\n        id='view_on_github'\n        href='https://github.com/vincerubinetti/svg-to-png'\n      >\n        <i className='fab fa-lg fa-github'></i>\n        <span>on GitHub</span>\n      </a>\n    </section>\n  </header>\n);\n","import React from 'react';\n\nimport './cell.css';\nimport './tooltip.css';\n\n// generic cell/control component\nexport const Cell = ({\n  style,\n  tooltip,\n  text,\n  icon,\n  controlId,\n  control,\n  color,\n  disabled\n}) => (\n  <div className='cell' style={{ ...style, color }} data-tooltip={tooltip}>\n    {(text || icon) && (\n      <div className='header' disabled={disabled ? true : undefined}>\n        {text && <span>{text}</span>}\n        {icon && <i className={icon}></i>}\n      </div>\n    )}\n    {control && (\n      <div\n        id={controlId}\n        className='control'\n        disabled={disabled ? true : undefined}\n      >\n        {control}\n      </div>\n    )}\n  </div>\n);\n","import React from 'react';\nimport { useRef } from 'react';\nimport { useState } from 'react';\n\nimport { Cell } from './cell';\n\nimport './upload.css';\n\n// upload component\nexport const Upload = ({ setSource, setFilename }) => {\n  // component state\n  const inputRef = useRef(null);\n  const [uploadDrag, setUploadDrag] = useState(false);\n\n  // on upload\n  const onUpload = async (target) => {\n    const file = target?.files[0];\n    const text = (await file.text()) || '';\n    setSource(text);\n    setFilename(file?.name?.replace(/.svg$/, ''));\n    if (text && inputRef.current)\n      inputRef.current.value = null;\n  };\n\n  // on button click, click hidden file input\n  const onUploadClick = () => inputRef?.current?.click();\n\n  // on file input change\n  const onUploadChange = (event) => onUpload(event.target);\n\n  // on button drag file over, set drag flag on\n  const onUploadDragEnter = () => setUploadDrag(true);\n\n  // on button drag file off, set drag flag off\n  const onUploadDragLeave = () => setUploadDrag(false);\n\n  // on button drag file\n  const onUploadDragOver = (event) => event.preventDefault();\n\n  // on button file drop\n  const onUploadDrop = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setUploadDrag(false);\n    onUpload(event.dataTransfer);\n  };\n\n  // render component\n  return (\n    <>\n      <input\n        ref={inputRef}\n        onChange={onUploadChange}\n        type='file'\n        accept='image/svg+xml'\n        style={{ display: 'none' }}\n      />\n      <Cell\n        text='Upload File'\n        tooltip='Load an SVG file from your device'\n        icon='fas fa-upload'\n        control={\n          <button\n            id='upload_button'\n            className='big_control'\n            data-drag={uploadDrag}\n            onClick={onUploadClick}\n            onDragEnter={onUploadDragEnter}\n            onDragLeave={onUploadDragLeave}\n            onDragOver={onUploadDragOver}\n            onDrop={onUploadDrop}\n          >\n            <span>Choose or drag file</span>\n          </button>\n        }\n      />\n    </>\n  );\n};\n","import React from 'react';\n\nimport { Cell } from './cell';\n\n// paste component\nexport const Paste = ({ source, setSource }) => {\n  // on input text change\n  const onPasteInputChange = (event) => {\n    // update source code text\n    setSource(event.target.value);\n  };\n\n  // render component\n  return (\n    <Cell\n      text='Paste Source'\n      tooltip='Copy and paste the source code text of an SVG'\n      icon='fas fa-code'\n      control={\n        <textarea\n          className='big_control'\n          value={source}\n          onChange={onPasteInputChange}\n        />\n      }\n    />\n  );\n};\n","import React from 'react';\n\nimport { Cell } from './cell';\n\n// file info section\nexport const Info = ({\n  error,\n  filename,\n  viewBox,\n  specifiedWidth,\n  specifiedHeight,\n  absoluteWidth,\n  absoluteHeight\n}) => (\n  <>\n    {error !== '' && (\n      <Cell\n        text='Parsing Error'\n        tooltip='An error the browser gave when trying to parse the SVG'\n        icon='fas fa-exclamation-triangle'\n        control={error}\n        color='var(--red)'\n      />\n    )}\n    {error === '' && (\n      <>\n        <Cell\n          text='Filename'\n          tooltip='Name of the loaded file'\n          control={filename || '–'}\n        />\n        <Cell\n          text='View Box'\n          tooltip='The viewBox attribute specified in the SVG'\n          control={viewBox || '–'}\n        />\n        <Cell\n          text='Specified Size'\n          tooltip='The width and height attributes specified in the SVG'\n          control={(specifiedWidth || '–') + ' × ' + (specifiedHeight || '–')}\n        />\n        <Cell\n          text='Absolute Size'\n          tooltip='The specified width and height of the image converted to pixels'\n          control={\n            (absoluteWidth || '–') + 'px × ' + (absoluteHeight || '–') + 'px'\n          }\n        />\n      </>\n    )}\n  </>\n);\n","import React from 'react';\n\nimport { Cell } from './cell';\n\n// width component\nexport const Width = ({ width, setWidth, setHeight, aspectRatio }) => {\n  const onDimensionChange = (event) => {\n    // update width\n    setWidth(event.target.value);\n    // update height also, if aspect ratio locked\n    if (aspectRatio)\n      setHeight(event.target.value / aspectRatio);\n  };\n\n  // render component\n  return (\n    <Cell\n      text='Width'\n      tooltip='Width of the final image in pixels'\n      icon='fas fa-arrows-alt-h'\n      control={\n        <input\n          className='small_control'\n          type='number'\n          min='2'\n          max='100000'\n          step='1'\n          value={width}\n          data-width\n          onChange={onDimensionChange}\n        />\n      }\n    />\n  );\n};\n","import React from 'react';\n\nimport { Cell } from './cell';\n\n// height component\nexport const Height = ({ setWidth, height, setHeight, aspectRatio }) => {\n  // on input value change\n  const onDimensionChange = (event) => {\n    // update height\n    setHeight(event.target.value);\n    // update width also, if aspect ratio locked\n    if (aspectRatio)\n      setWidth(event.target.value * aspectRatio);\n  };\n\n  // render component\n  return (\n    <Cell\n      text='Height'\n      tooltip='Height of the final image in pixels'\n      icon='fas fa-arrows-alt-v'\n      control={\n        <input\n          className='small_control'\n          type='number'\n          min='2'\n          max='100000'\n          step='1'\n          value={height}\n          data-height\n          onChange={onDimensionChange}\n        />\n      }\n    />\n  );\n};\n","import React from 'react';\n\nimport { Cell } from './cell';\n\n// lock aspect ratio component\nexport const Aspect = ({ width, height, aspectRatio, setAspectRatio }) => {\n  // on button click\n  const onAspectClick = () => {\n    // reset aspect ratio to 0 (unlink height and width)\n    if (aspectRatio)\n      setAspectRatio(0);\n    // lock aspect ratio to current width/height ratio\n    else\n      setAspectRatio(width / height);\n  };\n\n  // render component\n  return (\n    <Cell\n      text=' '\n      tooltip={\n        (aspectRatio ? 'Unlock' : 'Lock') +\n        ' aspect ratio  –  ' +\n        width +\n        '/' +\n        height +\n        ' = ' +\n        (width / height).toFixed(3)\n      }\n      control={\n        <button className='square_control' onClick={onAspectClick}>\n          {aspectRatio ? (\n            <i className='fas fa-link'></i>\n          ) : (\n            <i className='fas fa-unlink'></i>\n          )}\n        </button>\n      }\n    />\n  );\n};\n","import React from 'react';\n\nimport { Cell } from './cell';\n\n// reset dimensions component\nexport const Reset = ({\n  setWidth,\n  setHeight,\n  setAspectRatio,\n  originalWidth,\n  originalHeight\n}) => {\n  // on button click\n  const resetDimensions = () => {\n    // reset dimensions to original size\n    setWidth(originalWidth);\n    setHeight(originalHeight);\n    setAspectRatio(originalWidth / originalHeight);\n  };\n\n  // render component\n  return (\n    <Cell\n      text=' '\n      tooltip={\n        'Reset width and height to the original image dimensions – ' +\n        originalWidth +\n        ' × ' +\n        originalHeight\n      }\n      control={\n        <button className='control' onClick={resetDimensions}>\n          <span>Reset</span>\n          <i className='fas fa-sync-alt'></i>\n        </button>\n      }\n    />\n  );\n};\n","import React from 'react';\n\nimport { Cell } from './cell';\n\n// fit method select component\nexport const Fit = ({ fit, setFit }) => (\n  <Cell\n    text='Fit'\n    tooltip='How to fit the original image into the final container'\n    icon='fas fa-expand-alt'\n    control={\n      <select\n        className='small_control'\n        value={fit}\n        onChange={(event) => setFit(event.target.value)}\n      >\n        <option>stretch</option>\n        <option>contain</option>\n        <option>cover</option>\n      </select>\n    }\n  />\n);\n","import React from 'react';\n\nimport { Cell } from './cell';\n\n// margin component\nexport const Margin = ({ margin, setMargin }) => (\n  <Cell\n    text='Margin'\n    tooltip='How many pixels of space to add on each side of the image'\n    icon='fas fa-expand'\n    control={\n      <input\n        className='small_control'\n        type='number'\n        min='-10000'\n        max='10000'\n        step='1'\n        value={margin}\n        onChange={(event) => setMargin(event.target.value)}\n      />\n    }\n  />\n);\n","import React from 'react';\n\nimport { Cell } from './cell';\n\n// transparent background component\nexport const Transparent = ({ transparent, setTransparent }) => (\n  <Cell\n    text='Transparent'\n    tooltip='Whether to leave the background transparent or fill it with a color'\n    icon='fas fa-fill-drip'\n    control={\n      <input\n        className='tiny_control'\n        type='checkbox'\n        checked={transparent}\n        onChange={(event) =>\n          setTransparent(event.target.checked ? true : false)\n        }\n      />\n    }\n  />\n);\n","import React from 'react';\n\nimport { Cell } from './cell';\n\n// background color component\nexport const Background = ({ transparent, background, setBackground }) => (\n  <Cell\n    text='Background Color'\n    tooltip='What color to fill the background'\n    icon='fas fa-palette'\n    disabled={transparent}\n    control={\n      <input\n        className='square_control'\n        type='color'\n        value={background}\n        disabled={transparent}\n        onChange={(event) => setBackground(event.target.value)}\n      />\n    }\n  />\n);\n","import React from 'react';\n\nimport { Cell } from './cell';\n\nimport { densityScale } from './';\nimport { defaultWidth } from './constants';\nimport { defaultHeight } from './constants';\n\nimport './canvas.css';\n\n// canvas component\nexport const Canvas = ({\n  image,\n  width,\n  height,\n  originalWidth,\n  originalHeight,\n  fit,\n  margin,\n  transparent,\n  background\n}) => {\n  // size to draw svg image onto canvas\n  let drawWidth = (Math.abs(width) || defaultWidth) - margin * 2;\n  let drawHeight = (Math.abs(height) || defaultHeight) - margin * 2;\n\n  // scale down draw size to contain full svg within bounds of canvas\n  const contain = () => {\n    if (originalWidth / originalHeight < drawWidth / drawHeight)\n      drawWidth = (drawHeight * originalWidth) / originalHeight;\n    else\n      drawHeight = (drawWidth * originalHeight) / originalWidth;\n  };\n\n  // scale up draw size to cover full canvas with svg\n  const cover = () => {\n    if (originalWidth / originalHeight > drawWidth / drawHeight)\n      drawWidth = (drawHeight * originalWidth) / originalHeight;\n    else\n      drawHeight = (drawWidth * originalHeight) / originalWidth;\n  };\n\n  // draw canvas when rendering component\n  const drawCanvas = (canvas) => {\n    // if canvas doesn't exist yet (first render), don't draw\n    if (!canvas)\n      return;\n\n    // clear any existing contents on canvas\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // fill background\n    if (!transparent) {\n      ctx.fillStyle = background;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n    // if no image to draw, don't draw\n    if (!image)\n      return;\n\n    // run fit calculations\n    if (fit === 'contain')\n      contain();\n    if (fit === 'cover')\n      cover();\n\n    // center svg image within canvas\n    const x = (width - drawWidth) / 2;\n    const y = (height - drawHeight) / 2;\n\n    // draw svg to canvas\n    ctx.drawImage(image, x, y, drawWidth, drawHeight);\n  };\n\n  // render component\n  return (\n    <Cell\n      text='Result'\n      tooltip='A preview of the resulting PNG image. It should appear at real, pixel-for-pixel size if the page zoom level is the same as when you opened it.'\n      icon='fas fa-eye'\n      controlId='canvas_frame'\n      control={\n        <canvas\n          ref={drawCanvas}\n          width={width}\n          height={height}\n          style={{\n            width: width / densityScale + 'px',\n            height: height / densityScale + 'px'\n          }}\n        />\n      }\n    />\n  );\n};\n","// default size of svg when no other dimensions specified\nexport const defaultWidth = 300;\nexport const defaultHeight = 150;\n","import React from 'react';\n\nimport { Cell } from './cell';\n\n// download component\nexport const Download = ({ filename }) => {\n  // on button click\n  const onDownload = () => {\n    // transform canvas to URI\n    const uri = document\n      .querySelector('canvas')\n      .toDataURL('image/png')\n      .replace('image/png', 'octet/stream');\n    // create link to URI and force click to download\n    const link = document.createElement('a');\n    link.href = uri;\n    link.download = (filename || 'image') + '.png';\n    link.click();\n  };\n\n  // render component\n  return (\n    <Cell\n      tooltip='Download the final PNG image'\n      control={\n        <button className='control' onClick={onDownload}>\n          <span>Download</span>\n          <i className='fas fa-download'></i>\n        </button>\n      }\n    />\n  );\n};\n","import React from 'react';\n\nimport './section.css';\n\n// section component\nexport const Section = ({ ...props }) => <section {...props} />;\n","import React from 'react';\n\nimport './hr.css';\n\n// horizontal rule component\nexport const Hr = () => <hr />;\n","// convert string of CSS units -- 4in, 200mm, etc. -- to pixels\nexport const unitsToPixels = (string) => {\n  string = string || '';\n  // unit constants\n  const ppi = 96;\n  const units = {\n    ch: 8,\n    ex: 7.15625,\n    em: 16,\n    rem: 16,\n    in: ppi,\n    cm: ppi / 2.54,\n    mm: ppi / 25.4,\n    pt: ppi / 72,\n    pc: ppi / 6,\n    px: 1\n  };\n  // get number\n  let value = parseFloat(string) || 0;\n  // get unit\n  const unit = string.replace(value, '').trim();\n  // multiply value by unit constant\n  value *= units[unit] || 1;\n  return value;\n};\n\n// load URI as image object, as an async-await-able function\nconst urlToImage = (url) =>\n  new Promise((resolve, reject) => {\n    const image = new Image();\n    image.addEventListener('load', () => resolve(image));\n    image.addEventListener('error', (error) => reject(error));\n    image.src = url;\n  });\n\n// convert svg source code to image object\nexport const sourceToImage = async (source) => {\n  const blob = new Blob([source || ''], { type: 'image/svg+xml' });\n  const image = (await urlToImage(URL.createObjectURL(blob))) || null;\n  URL.revokeObjectURL(image.src);\n  return image;\n};\n\n// convert svg source code to dom element\nexport const sourceToSvg = (source) => {\n  const doc = new DOMParser().parseFromString(source, 'image/svg+xml');\n  const svg = doc.querySelector('svg');\n  const error = doc.querySelector('parsererror');\n  if (error)\n    throw new Error(error.textContent);\n  if (svg)\n    return svg;\n  throw new Error('unknown error');\n};\n","import React from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nimport { Upload } from './upload';\nimport { Paste } from './paste';\nimport { Info } from './info';\nimport { Width } from './width';\nimport { Height } from './height';\nimport { Aspect } from './aspect';\nimport { Reset } from './reset';\nimport { Fit } from './fit';\nimport { Margin } from './margin';\nimport { Transparent } from './transparent';\nimport { Background } from './background';\nimport { Canvas } from './canvas';\nimport { Download } from './download';\n\nimport { Section } from './section';\nimport { Cell } from './cell';\nimport { Hr } from './hr';\nimport { Br } from './br';\n\nimport { unitsToPixels } from './util';\nimport { sourceToSvg } from './util';\nimport { sourceToImage } from './util';\nimport { defaultWidth } from './constants';\nimport { defaultHeight } from './constants';\n\nimport './main.css';\n\n// main component\nexport const Main = () => {\n  // component state\n  const [show, setShow] = useState(false);\n\n  // source state\n  const [source, setSource] = useState(''); // source code text of svg\n  const [filename, setFilename] = useState(''); // filename of svg\n  const [svg, setSvg] = useState(null); // dom element for getting svg attributes\n  const [image, setImage] = useState(null); // dom img element for drawing to canvas\n  const [error, setError] = useState(''); // svg parsing error, if any\n\n  // extracted dimensions\n  const specifiedWidth = svg?.getAttribute('width') || ''; // width, exactly as given in svg source\n  const specifiedHeight = svg?.getAttribute('height') || ''; // height, exactly as given in svg source\n  const viewBox = svg?.getAttribute('viewBox') || ''; // viewBox, exactly as given in svg source\n  const absoluteWidth = unitsToPixels(specifiedWidth); // specified width converted to pixels\n  const absoluteHeight = unitsToPixels(specifiedHeight); // specified height converted to pixels\n  const viewBoxWidth = parseFloat(viewBox.split(/\\s/)[2]); // width portion of viewBox\n  const viewBoxHeight = parseFloat(viewBox.split(/\\s/)[3]); // height portion of viewBox\n  const originalWidth = absoluteWidth || viewBoxWidth || defaultWidth; // considered \"width\" of original svg\n  const originalHeight = absoluteHeight || viewBoxHeight || defaultHeight; // considered \"height\" of original svg\n\n  // dimensions state\n  const [width, setWidth] = useState(defaultWidth); // width to make final image\n  const [height, setHeight] = useState(defaultHeight); // height to make final image\n  const [aspectRatio, setAspectRatio] = useState(width / height); // ratio to lock width/height to. 0 if width/height unlinked\n\n  // margins state\n  const [fit, setFit] = useState('stretch'); // fit mode. stretch, contain, or cover\n  const [margin, setMargin] = useState(0); // pixels to add to each side of image\n\n  // background state\n  const [transparent, setTransparent] = useState(true); // whether to leave background transparent\n  const [background, setBackground] = useState('#000000'); // what color to fill background\n\n  // when source changes\n  useEffect(() => {\n    const update = async () => {\n      try {\n        // set svg and image\n        setSvg(sourceToSvg(source));\n        setImage(await sourceToImage(source));\n        setError('');\n      } catch (error) {\n        // set error if problem parsing svg source\n        setError(error.message || '');\n      }\n      // show hidden UI elements\n      if (source)\n        setShow(true);\n    };\n    update();\n  }, [source]);\n\n  // when original size changes (because source changes)\n  useEffect(() => {\n    // reset dimensions\n    setWidth(originalWidth);\n    setHeight(originalHeight);\n    // reset aspect ratio\n    setAspectRatio(originalWidth / originalHeight);\n  }, [originalWidth, originalHeight]);\n\n  // when margin changes\n  useEffect(() => {\n    // don't let margin exceed half of image size\n    const max = Math.min(width, height) / 2;\n    if (margin > max)\n      setMargin(max);\n  }, [width, height, margin]);\n\n  // render component\n  return (\n    <main>\n      <Section>\n        <Upload {...{ setSource, setFilename }} />\n        <Cell text='or' />\n        <Paste {...{ source, setSource, setSvg, setImage }} />\n        <Br />\n        {show && (\n          <Info\n            {...{\n              error,\n              filename,\n              viewBox,\n              specifiedWidth,\n              specifiedHeight,\n              absoluteWidth,\n              absoluteHeight\n            }}\n          />\n        )}\n      </Section>\n      {show && (\n        <>\n          <Hr />\n          <Section>\n            <Width\n              {...{\n                width,\n                setWidth,\n                setHeight,\n                aspectRatio\n              }}\n            />\n            <Aspect {...{ width, height, aspectRatio, setAspectRatio }} />\n            <Height\n              {...{\n                setWidth,\n                height,\n                setHeight,\n                aspectRatio\n              }}\n            />\n            <Reset\n              {...{\n                setWidth,\n                setHeight,\n                setAspectRatio,\n                originalWidth,\n                originalHeight\n              }}\n            />\n            <Br />\n            <Fit {...{ fit, setFit }} />\n            <Margin {...{ margin, setMargin }} />\n            <Transparent {...{ transparent, setTransparent }} />\n            <Background {...{ transparent, background, setBackground }} />\n          </Section>\n          <Hr />\n          <Section>\n            <Canvas\n              {...{\n                image,\n                width,\n                height,\n                originalWidth,\n                originalHeight,\n                fit,\n                margin,\n                transparent,\n                background\n              }}\n            />\n            <Br />\n            <Download {...{ filename }} />\n          </Section>\n        </>\n      )}\n    </main>\n  );\n};\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport { Header } from './header';\nimport { Main } from './main';\n\nimport './index.css';\n\n// get the initial, baseline pixel ratio\nexport const densityScale = window.devicePixelRatio;\n\n// app component\nconst App = () => (\n  <>\n    <Header />\n    <Main />\n  </>\n);\n\n// run app component\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}